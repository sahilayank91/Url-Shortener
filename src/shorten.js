



var key_to_UrlMap = {}; //hashed table to store the key-url pair
let url_to_KeyMap = {}; //hash table to store the url-key pair to quickly search for the expanded url
let charMapping = []; //This array is used for characted to number mapping

/*Function to check for the validity of the url provided*/
/*Used REGEX for validation*/
function checkForValidityOfUrl(url){
  let valid = /^(ftp|http|https|www):\/\/[^ "]+$/.test(url);
  var pattern = new RegExp(valid);
  return pattern.test(url);
}


function preprocessor(){
    /*Some preprocessing to store all the digits in char array*/

    for(let i=0;i<62;i++){
      let j = 0;
      if(i<10){
        j = i+48;     
      } else if(i>9 && i<=35){
        j = i+55;
      }else{
        j = i+61;
      }
      charMapping[i] = String.fromCharCode(j);
  }
}

preprocessor();

// sanitizeURL
// Convert URL into a proper workable format
// This method should take care various issues with a valid url
// e.g. www.google.com,www.google.com/, http://www.google.com,
// http://www.google.com/
// all the above URL should point to same shortened URL
// There could be several other cases like these.

function sanitizeURL(url){
  if (url.substring(0, 7)==="http://")
        url = url.substring(7);

  if (url.substring(0, 8)==="https://")
        url = url.substring(8);

  if (url.charAt(url.length - 1) === '/')
        url = url.substring(0, url.length - 1);

     
  return url;
}

/*Function to generate the key for a unique URL*/
function generateKey() {

  let key;
  let flag = true;

  /*Base encoding contains 62 characters 26 small alphabets + 26 capital alphabets + 10 digits, equal to 62 */

  //Min max value are decided on the basis of number of different characters we can get in the shortcode
  let min=0;            
  let max=61; 
  let keyLength = 6;    //The key length is given in question 

  while (flag) {
    key = "";
    for (var i = 0; i < keyLength; i++) {
      key += charMapping[Math.floor(Math.random() * (+max - +min)) + +min];
    }
    if (key_to_UrlMap[key]===undefined) {
      flag = false;
    }
  }
  return key;
}

function getKey(url){
    let key = generateKey(key_to_UrlMap,url_to_KeyMap);
    key_to_UrlMap[key]=url;     //Adding to the hash value so that extended URL can be extracted in O(1) time
    url_to_KeyMap[url] = key;   //Adding the shortcode and url to the hash for future use
    return key;
}

/*FUnction to expand URL , parameters required = shortcode */
function expandURL(shortcode){

  /*returns the default www.hackkar.com if the hash does not contain the shortcode as a key in it*/
  /*It means the shortcode was not generated by our server*/

    return (key_to_UrlMap[shortcode]!==undefined)?key_to_UrlMap[shortcode]:'www.hackkar.com';

}
function shorten(url) {
  /**
   * Flesh out this function so that it returns a unique
   * string that's six characters in length. With a charset
   * that includes numbers (0-9) and letters (a-z, A-Z),
   * this allows for 62 ^ 6, or over 56 billion possible
   * URLs. That's quite enough for this example. :-)
   *
   * You can check `tests/index.test.js` to see the criteria
   * that this function should satisfy. You can run all
   * tests from the command line as follows:
   *
   *     $ npm run test
   *
   * Have fun!
   */
  
   /* I am using the hashing method to store the key and url to map in a javascript object*/

    /*Converting the given URL to be of particular type so that all the different url of same domain should get shortened to the same value*/
    /* The domain here is the prefix we use like tinyurl.com etc*/
    /* Here domain is nothing as we have to just return the six letter shortened url*/
    let domain;  

    let keyLength  = 6;


    /*Here domain is empty because we have to return the 6 letter shortcode only*/
    /*If we need to return string like www.tinyurl.com/{6 letter shortcode} , then we can change domain to the prefix value*/
      domain = "";   
      let shortUrl;
      let longURL = sanitizeURL(url);
      if (url_to_KeyMap[longURL]!==undefined) {
        shortUrl = url_to_KeyMap[longURL];
			} else {
        shortUrl = getKey(longURL);
        url_to_KeyMap[longURL] = shortUrl;
        key_to_UrlMap[shortUrl] = longURL;
			}
    return shortUrl;

}
/*Changed this part to export two functions*/
module.exports = {
  shorten:shorten,
  expandURL:expandURL
};
